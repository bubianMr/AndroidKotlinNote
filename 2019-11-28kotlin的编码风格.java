/**
 * kotlin的编码风格
 */
class TestMain201911282 {
    /**
     * 1、命名风格
     *    --使用驼峰命名法（在命名中避免下划线）
     *    --类型命名首字母大写
     *    --方法和属性首字母小写
     *    --缩进用四个空格
     *    --pulic 方法要写说明文档，这样它就可以出现在Kotlin Doc中
     */

    /**
     * 2、冒号
     *    --在冒号区分类型和父类型中要有空格，在实例和类型之间是没有空格的
     *    如下代码
     *
     *    interface Foot<out T : Any> : String {
            fun foot(a:Int):T
            }
     */

    /**
     * 3、Lambdas
     *    --在Lambds表达式中，大括号与表达式之间要有空格，箭头与参数和函数体之间要有空格。
     *    --lambda表达式应尽可能不要写在圆括号中
     *    如下代码
     *
     *    list.filter { it >10 }.map {element -> element * 2 }
     *
     *    --在使用简短而非嵌套的lambda中，建议使用it而不是显式的声明参数。
     *    --在使用参数的嵌套lambd中，参数应该总是显式声明
     */

    /**
     * 4、类声明格式
     *    --参数比较少的类可以用一行来代表
     *    如下代码
     *
     *    class Person(id: Int,name :String)
     *
     *    --具有较多的参数的类应该格式化成每个构造函数的参数都位于缩进的单独行中。
     *    --此外，结束括号应该在新行上。
     *    --如果我们使用继承，那么超类构造函数调用或实现的接口列表应该位于与括号相同的行中
     *    如下代码
     *
     *    class Person(
     *      id: Int,
     *      name: String
     *    ) : Human(id,name) {
     *      //....
     *    }
     *
     *    --对于多个接口，应该首先定位超类构造函数调用，然后每个接口应该位于不同的行中
     *    如下代码
     *
     *    class Person(
     *      id: Int,
     *      name: String,
     *      surname: String
     *    ): human(id,name),KotlinMaker {
     *      //...
     *    }
     *
     *    --构造函数参数可以使用餐柜缩进或连续缩进（双倍正常缩进）。
     */

    /**
     * 5、Unit
     *    --如果函数返回 Unit，返回类型应该省略
     *    如下代码
     *
     *    fun foot(){
     *      //Unit就被省略了
     *    }
     */

    /**
     * 6、函数 VS 属性
     *    --不需要抛出异常  复杂度为0 （1）
     *    --低消耗的计算（或首次运行结果会被缓存）
     *    --返回与调用相同的结果
     */
}